pragma Singleton
import QtQuick

// IF YOU'RE READING THIS FROM Colors.qml, HEAD OVER TO Colors-TEMPLATE TO EDIT THE TEMPLATE INSTEAD.
// A pywal template.
QtObject {{
    property string wallpaper: "{wallpaper}"
    property color background: "{background}"
    property color foreground: "{foreground}"
    property color accent: "{color1}"
    property color color0: "{color0}"
    property color color1: "{color1}"
    property color color2: "{color2}"
    property color color3: "{color3}"
    property color color4: "{color4}"
    property color color5: "{color5}"
    property color color6: "{color6}"
    property color color7: "{color7}"
    property color color8: "{color8}"
    property color color9: "{color9}"
    property color color10: "{color10}"
    property color color11: "{color11}"
    property color color12: "{color12}"
    property color color13: "{color13}"
    property color color14: "{color14}"
    property color color15: "{color15}"

    function lighten(color, factor) {{
        var hsl = Qt.hsla(color.hslHue, color.hslSaturation, Math.min(1.0, color.hslLightness + factor), color.a)
        return hsl
    }}

    function darken(color, factor) {{
        var hsl = Qt.hsla(color.hslHue, color.hslSaturation, Math.max(0.0, color.hslLightness - factor), color.a)
        return hsl
    }}

    function opacify(color, alpha) {{
        return Qt.rgba(color.r, color.g, color.b, alpha)
    }}

    function mix(color1, color2, ratio) {{
        var r = color1.r + (color2.r - color1.r) * ratio
        var g = color1.g + (color2.g - color1.g) * ratio
        var b = color1.b + (color2.b - color1.b) * ratio
        var a = color1.a + (color2.a - color1.a) * ratio
        return Qt.rgba(r, g, b, a)
    }}

    function fromHex(hex) {{
        return Qt.color(hex)
    }}
}}